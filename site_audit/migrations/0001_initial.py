# Generated by Django 4.2.4 on 2024-05-05 12:39

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("users", "0003_remove_company_address_remove_company_city_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Page",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(db_index=True, max_length=1000, unique=True)),
                ("first_crawl_at", models.DateTimeField(auto_now_add=True)),
                ("last_crawl_at", models.DateTimeField(auto_now=True)),
                ("content_sha256", models.CharField(max_length=64)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.company"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DailySiteMetric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("metric_value", models.FloatField()),
                ("metric_name", models.CharField(db_index=True, max_length=50)),
                ("metric_date", models.DateField(auto_now_add=True, db_index=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.company"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DailyPageMetric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("metric_value", models.FloatField()),
                (
                    "metric_name",
                    models.CharField(
                        choices=[
                            ("CRAWL_DEPTH", "The current crawl depth of the page."),
                            ("STATUS_CODE", "The status code of the page."),
                            (
                                "IS_INDEXABLE",
                                "The page is indexable, not blocked by any robots.txt or meta tag rule.",
                            ),
                            (
                                "HAS_URL_ISSUES",
                                "The crawled page has URL issues: non ascii char, params, space.",
                            ),
                            ("HAS_META_TITLE", "The crawled page has a meta title."),
                            (
                                "HAS_META_DESCRIPTION",
                                "The crawled page has a meta description.",
                            ),
                            (
                                "HAS_ONLY_ONE_H1",
                                "The crawled page has only one H1 tag.",
                            ),
                            (
                                "HAS_NO_REDIRECT_CHAIN",
                                "The crawled page has no redirect chain.",
                            ),
                            (
                                "HAS_VALID_HREFLANG",
                                "The crawled page has valid hreflang tags.",
                            ),
                            ("USES_HTTPS", "The page uses HTTPS."),
                            (
                                "PSI_PERFORMANCE_SCORE",
                                "The Google Page Speed Insights performance score.",
                            ),
                            (
                                "PSI_LARGEST_CONTENTFUL_PAINT",
                                "The Google Page Speed Insights LCP.",
                            ),
                            (
                                "PSI_TIME_TO_INTERACTIVE",
                                "The Google Page Speed Insights TTI.",
                            ),
                            (
                                "PSI_TOTAL_BLOCKING_TIME",
                                "The Google Page Speed Insights TBT.",
                            ),
                            (
                                "PSI_CUMULATIVE_LAYOUT_SHIFT",
                                "The Google Page Speed Insights CLS.",
                            ),
                            (
                                "PSI_SPEED_INDEX",
                                "The Google Page Speed Insights Speed Index.",
                            ),
                            (
                                "PSI_FIRST_CONTENTFUL_PAINT",
                                "The Google Page Speed Insights FCP.",
                            ),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                ("metric_date", models.DateField(auto_now_add=True, db_index=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.company"
                    ),
                ),
                (
                    "page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="site_audit.page",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DailyCrawl",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "The crawl is pending."),
                            ("RUNNING", "The crawl is running."),
                            ("SUCCESS", "The crawl has been successfully done."),
                            ("FAILED", "The crawl failed."),
                        ],
                        default="RUNNING",
                        max_length=50,
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.company"
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="page",
            index=models.Index(
                fields=["company", "url"], name="site_audit__company_64666d_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="page",
            unique_together={("company", "url")},
        ),
        migrations.AddIndex(
            model_name="dailysitemetric",
            index=models.Index(
                fields=["company", "metric_date"], name="site_audit__company_e2add3_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dailysitemetric",
            unique_together={("company", "metric_name", "metric_date")},
        ),
        migrations.AddIndex(
            model_name="dailypagemetric",
            index=models.Index(
                fields=["page", "company", "metric_date", "metric_name"],
                name="site_audit__page_id_247c53_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dailypagemetric",
            unique_together={("page", "metric_name", "metric_date")},
        ),
    ]
